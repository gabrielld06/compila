# Generated from tng.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,313,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,3,19,173,8,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,
        1,26,1,26,1,26,3,26,196,8,26,1,27,1,27,1,27,1,27,3,27,202,8,27,1,
        28,1,28,1,28,1,28,3,28,208,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,
        32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,4,36,225,8,36,11,36,12,
        36,226,1,37,4,37,230,8,37,11,37,12,37,231,1,37,1,37,5,37,236,8,37,
        10,37,12,37,239,9,37,1,37,1,37,4,37,243,8,37,11,37,12,37,244,3,37,
        247,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,258,8,
        38,1,39,1,39,5,39,262,8,39,10,39,12,39,265,9,39,1,40,1,40,1,40,5,
        40,270,8,40,10,40,12,40,273,9,40,1,40,1,40,1,41,1,41,1,41,1,42,4,
        42,281,8,42,11,42,12,42,282,1,42,1,42,1,43,1,43,1,43,3,43,290,8,
        43,1,43,5,43,293,8,43,10,43,12,43,296,9,43,1,43,1,43,1,44,1,44,1,
        44,1,44,5,44,304,8,44,10,44,12,44,307,9,44,1,44,1,44,1,44,1,44,1,
        44,1,305,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,0,85,42,87,43,
        89,44,1,0,7,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
        122,2,0,34,34,92,92,6,0,34,34,39,39,92,92,110,110,114,114,116,116,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,332,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,94,1,0,0,0,5,99,1,0,0,0,7,
        103,1,0,0,0,9,109,1,0,0,0,11,115,1,0,0,0,13,121,1,0,0,0,15,125,1,
        0,0,0,17,132,1,0,0,0,19,138,1,0,0,0,21,143,1,0,0,0,23,148,1,0,0,
        0,25,150,1,0,0,0,27,152,1,0,0,0,29,154,1,0,0,0,31,156,1,0,0,0,33,
        158,1,0,0,0,35,161,1,0,0,0,37,164,1,0,0,0,39,172,1,0,0,0,41,174,
        1,0,0,0,43,176,1,0,0,0,45,178,1,0,0,0,47,181,1,0,0,0,49,184,1,0,
        0,0,51,187,1,0,0,0,53,195,1,0,0,0,55,201,1,0,0,0,57,207,1,0,0,0,
        59,209,1,0,0,0,61,211,1,0,0,0,63,213,1,0,0,0,65,215,1,0,0,0,67,217,
        1,0,0,0,69,219,1,0,0,0,71,221,1,0,0,0,73,224,1,0,0,0,75,246,1,0,
        0,0,77,257,1,0,0,0,79,259,1,0,0,0,81,266,1,0,0,0,83,276,1,0,0,0,
        85,280,1,0,0,0,87,289,1,0,0,0,89,299,1,0,0,0,91,92,5,105,0,0,92,
        93,5,102,0,0,93,2,1,0,0,0,94,95,5,101,0,0,95,96,5,108,0,0,96,97,
        5,115,0,0,97,98,5,101,0,0,98,4,1,0,0,0,99,100,5,102,0,0,100,101,
        5,111,0,0,101,102,5,114,0,0,102,6,1,0,0,0,103,104,5,119,0,0,104,
        105,5,104,0,0,105,106,5,105,0,0,106,107,5,108,0,0,107,108,5,101,
        0,0,108,8,1,0,0,0,109,110,5,112,0,0,110,111,5,114,0,0,111,112,5,
        105,0,0,112,113,5,110,0,0,113,114,5,116,0,0,114,10,1,0,0,0,115,116,
        5,105,0,0,116,117,5,110,0,0,117,118,5,112,0,0,118,119,5,117,0,0,
        119,120,5,116,0,0,120,12,1,0,0,0,121,122,5,105,0,0,122,123,5,110,
        0,0,123,124,5,116,0,0,124,14,1,0,0,0,125,126,5,115,0,0,126,127,5,
        116,0,0,127,128,5,114,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,
        131,5,103,0,0,131,16,1,0,0,0,132,133,5,102,0,0,133,134,5,108,0,0,
        134,135,5,111,0,0,135,136,5,97,0,0,136,137,5,116,0,0,137,18,1,0,
        0,0,138,139,5,98,0,0,139,140,5,111,0,0,140,141,5,111,0,0,141,142,
        5,108,0,0,142,20,1,0,0,0,143,144,5,109,0,0,144,145,5,97,0,0,145,
        146,5,105,0,0,146,147,5,110,0,0,147,22,1,0,0,0,148,149,5,43,0,0,
        149,24,1,0,0,0,150,151,5,45,0,0,151,26,1,0,0,0,152,153,5,42,0,0,
        153,28,1,0,0,0,154,155,5,47,0,0,155,30,1,0,0,0,156,157,5,37,0,0,
        157,32,1,0,0,0,158,159,5,43,0,0,159,160,5,43,0,0,160,34,1,0,0,0,
        161,162,5,45,0,0,162,163,5,45,0,0,163,36,1,0,0,0,164,165,5,61,0,
        0,165,38,1,0,0,0,166,173,3,41,20,0,167,173,3,43,21,0,168,173,3,45,
        22,0,169,173,3,47,23,0,170,173,3,49,24,0,171,173,3,51,25,0,172,166,
        1,0,0,0,172,167,1,0,0,0,172,168,1,0,0,0,172,169,1,0,0,0,172,170,
        1,0,0,0,172,171,1,0,0,0,173,40,1,0,0,0,174,175,5,60,0,0,175,42,1,
        0,0,0,176,177,5,62,0,0,177,44,1,0,0,0,178,179,5,60,0,0,179,180,5,
        61,0,0,180,46,1,0,0,0,181,182,5,62,0,0,182,183,5,61,0,0,183,48,1,
        0,0,0,184,185,5,61,0,0,185,186,5,61,0,0,186,50,1,0,0,0,187,188,5,
        33,0,0,188,189,5,61,0,0,189,52,1,0,0,0,190,191,5,97,0,0,191,192,
        5,110,0,0,192,196,5,100,0,0,193,194,5,38,0,0,194,196,5,38,0,0,195,
        190,1,0,0,0,195,193,1,0,0,0,196,54,1,0,0,0,197,198,5,111,0,0,198,
        202,5,114,0,0,199,200,5,124,0,0,200,202,5,124,0,0,201,197,1,0,0,
        0,201,199,1,0,0,0,202,56,1,0,0,0,203,204,5,110,0,0,204,205,5,111,
        0,0,205,208,5,116,0,0,206,208,5,33,0,0,207,203,1,0,0,0,207,206,1,
        0,0,0,208,58,1,0,0,0,209,210,5,40,0,0,210,60,1,0,0,0,211,212,5,41,
        0,0,212,62,1,0,0,0,213,214,5,123,0,0,214,64,1,0,0,0,215,216,5,125,
        0,0,216,66,1,0,0,0,217,218,5,59,0,0,218,68,1,0,0,0,219,220,5,44,
        0,0,220,70,1,0,0,0,221,222,5,46,0,0,222,72,1,0,0,0,223,225,7,0,0,
        0,224,223,1,0,0,0,225,226,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,
        0,227,74,1,0,0,0,228,230,7,0,0,0,229,228,1,0,0,0,230,231,1,0,0,0,
        231,229,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,237,5,46,0,0,
        234,236,7,0,0,0,235,234,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,
        237,238,1,0,0,0,238,247,1,0,0,0,239,237,1,0,0,0,240,242,5,46,0,0,
        241,243,7,0,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,
        244,245,1,0,0,0,245,247,1,0,0,0,246,229,1,0,0,0,246,240,1,0,0,0,
        247,76,1,0,0,0,248,249,5,84,0,0,249,250,5,114,0,0,250,251,5,117,
        0,0,251,258,5,101,0,0,252,253,5,70,0,0,253,254,5,97,0,0,254,255,
        5,108,0,0,255,256,5,115,0,0,256,258,5,101,0,0,257,248,1,0,0,0,257,
        252,1,0,0,0,258,78,1,0,0,0,259,263,7,1,0,0,260,262,7,2,0,0,261,260,
        1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,80,1,
        0,0,0,265,263,1,0,0,0,266,271,5,34,0,0,267,270,3,83,41,0,268,270,
        8,3,0,0,269,267,1,0,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,
        1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,275,
        5,34,0,0,275,82,1,0,0,0,276,277,5,92,0,0,277,278,7,4,0,0,278,84,
        1,0,0,0,279,281,7,5,0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,
        1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,285,6,42,0,0,285,86,
        1,0,0,0,286,287,5,47,0,0,287,290,5,47,0,0,288,290,5,35,0,0,289,286,
        1,0,0,0,289,288,1,0,0,0,290,294,1,0,0,0,291,293,8,6,0,0,292,291,
        1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,297,
        1,0,0,0,296,294,1,0,0,0,297,298,6,43,0,0,298,88,1,0,0,0,299,300,
        5,47,0,0,300,301,5,42,0,0,301,305,1,0,0,0,302,304,9,0,0,0,303,302,
        1,0,0,0,304,307,1,0,0,0,305,306,1,0,0,0,305,303,1,0,0,0,306,308,
        1,0,0,0,307,305,1,0,0,0,308,309,5,42,0,0,309,310,5,47,0,0,310,311,
        1,0,0,0,311,312,6,44,0,0,312,90,1,0,0,0,18,0,172,195,201,207,226,
        231,237,244,246,257,263,269,271,282,289,294,305,1,6,0,0
    ]

class tngLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    WHILE = 4
    PRINT = 5
    INPUT = 6
    TIPO_INT = 7
    TIPO_STRING = 8
    TIPO_FLOAT = 9
    TIPO_BOOL = 10
    MAIN = 11
    MAIS = 12
    MENOS = 13
    MULT = 14
    DIV = 15
    MOD = 16
    INC = 17
    DEC = 18
    ATRIB = 19
    OP_LOGICO = 20
    MENOR = 21
    MAIOR = 22
    MENOR_IG = 23
    MAIOR_IG = 24
    IGUAL = 25
    N_IGUAL = 26
    AND = 27
    OR = 28
    NOT = 29
    PAR_E = 30
    PAR_D = 31
    CHAVE_E = 32
    CHAVE_D = 33
    PV = 34
    VIRG = 35
    PONTO = 36
    INTEGER = 37
    FLOAT = 38
    BOOL = 39
    IDENTIFIER = 40
    STRING = 41
    WS = 42
    LINECOMMENT = 43
    BLOCKCOMMENT = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'while'", "'print'", "'input'", 
            "'int'", "'string'", "'float'", "'bool'", "'main'", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'++'", "'--'", "'='", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'!='", "'('", "')'", "'{'", "'}'", "';'", "','", 
            "'.'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "WHILE", "PRINT", "INPUT", "TIPO_INT", 
            "TIPO_STRING", "TIPO_FLOAT", "TIPO_BOOL", "MAIN", "MAIS", "MENOS", 
            "MULT", "DIV", "MOD", "INC", "DEC", "ATRIB", "OP_LOGICO", "MENOR", 
            "MAIOR", "MENOR_IG", "MAIOR_IG", "IGUAL", "N_IGUAL", "AND", 
            "OR", "NOT", "PAR_E", "PAR_D", "CHAVE_E", "CHAVE_D", "PV", "VIRG", 
            "PONTO", "INTEGER", "FLOAT", "BOOL", "IDENTIFIER", "STRING", 
            "WS", "LINECOMMENT", "BLOCKCOMMENT" ]

    ruleNames = [ "IF", "ELSE", "FOR", "WHILE", "PRINT", "INPUT", "TIPO_INT", 
                  "TIPO_STRING", "TIPO_FLOAT", "TIPO_BOOL", "MAIN", "MAIS", 
                  "MENOS", "MULT", "DIV", "MOD", "INC", "DEC", "ATRIB", 
                  "OP_LOGICO", "MENOR", "MAIOR", "MENOR_IG", "MAIOR_IG", 
                  "IGUAL", "N_IGUAL", "AND", "OR", "NOT", "PAR_E", "PAR_D", 
                  "CHAVE_E", "CHAVE_D", "PV", "VIRG", "PONTO", "INTEGER", 
                  "FLOAT", "BOOL", "IDENTIFIER", "STRING", "CHAR_ESP", "WS", 
                  "LINECOMMENT", "BLOCKCOMMENT" ]

    grammarFileName = "tng.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


