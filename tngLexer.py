# Generated from tng.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,314,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,19,3,19,174,8,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,26,3,26,197,8,26,1,27,1,27,1,27,1,27,3,27,203,8,
        27,1,28,1,28,1,28,1,28,3,28,209,8,28,1,29,1,29,1,30,1,30,1,31,1,
        31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,4,36,226,8,36,11,
        36,12,36,227,1,37,4,37,231,8,37,11,37,12,37,232,1,37,1,37,5,37,237,
        8,37,10,37,12,37,240,9,37,1,37,1,37,4,37,244,8,37,11,37,12,37,245,
        3,37,248,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,
        259,8,38,1,39,1,39,5,39,263,8,39,10,39,12,39,266,9,39,1,40,1,40,
        1,40,5,40,271,8,40,10,40,12,40,274,9,40,1,40,1,40,1,41,1,41,1,41,
        1,42,4,42,282,8,42,11,42,12,42,283,1,42,1,42,1,43,1,43,1,43,3,43,
        291,8,43,1,43,5,43,294,8,43,10,43,12,43,297,9,43,1,43,1,43,1,44,
        1,44,1,44,1,44,5,44,305,8,44,10,44,12,44,308,9,44,1,44,1,44,1,44,
        1,44,1,44,1,306,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,0,85,
        42,87,43,89,44,1,0,7,1,0,48,57,2,0,65,90,97,122,3,0,48,57,65,90,
        97,122,2,0,34,34,92,92,6,0,34,34,39,39,92,92,110,110,114,114,116,
        116,3,0,9,10,13,13,32,32,2,0,10,10,13,13,333,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,94,1,0,0,0,5,99,1,0,0,
        0,7,103,1,0,0,0,9,109,1,0,0,0,11,116,1,0,0,0,13,122,1,0,0,0,15,126,
        1,0,0,0,17,133,1,0,0,0,19,139,1,0,0,0,21,144,1,0,0,0,23,149,1,0,
        0,0,25,151,1,0,0,0,27,153,1,0,0,0,29,155,1,0,0,0,31,157,1,0,0,0,
        33,159,1,0,0,0,35,162,1,0,0,0,37,165,1,0,0,0,39,173,1,0,0,0,41,175,
        1,0,0,0,43,177,1,0,0,0,45,179,1,0,0,0,47,182,1,0,0,0,49,185,1,0,
        0,0,51,188,1,0,0,0,53,196,1,0,0,0,55,202,1,0,0,0,57,208,1,0,0,0,
        59,210,1,0,0,0,61,212,1,0,0,0,63,214,1,0,0,0,65,216,1,0,0,0,67,218,
        1,0,0,0,69,220,1,0,0,0,71,222,1,0,0,0,73,225,1,0,0,0,75,247,1,0,
        0,0,77,258,1,0,0,0,79,260,1,0,0,0,81,267,1,0,0,0,83,277,1,0,0,0,
        85,281,1,0,0,0,87,290,1,0,0,0,89,300,1,0,0,0,91,92,5,105,0,0,92,
        93,5,102,0,0,93,2,1,0,0,0,94,95,5,101,0,0,95,96,5,108,0,0,96,97,
        5,115,0,0,97,98,5,101,0,0,98,4,1,0,0,0,99,100,5,102,0,0,100,101,
        5,111,0,0,101,102,5,114,0,0,102,6,1,0,0,0,103,104,5,119,0,0,104,
        105,5,104,0,0,105,106,5,105,0,0,106,107,5,108,0,0,107,108,5,101,
        0,0,108,8,1,0,0,0,109,110,5,114,0,0,110,111,5,101,0,0,111,112,5,
        116,0,0,112,113,5,117,0,0,113,114,5,114,0,0,114,115,5,110,0,0,115,
        10,1,0,0,0,116,117,5,112,0,0,117,118,5,114,0,0,118,119,5,105,0,0,
        119,120,5,110,0,0,120,121,5,116,0,0,121,12,1,0,0,0,122,123,5,105,
        0,0,123,124,5,110,0,0,124,125,5,116,0,0,125,14,1,0,0,0,126,127,5,
        115,0,0,127,128,5,116,0,0,128,129,5,114,0,0,129,130,5,105,0,0,130,
        131,5,110,0,0,131,132,5,103,0,0,132,16,1,0,0,0,133,134,5,102,0,0,
        134,135,5,108,0,0,135,136,5,111,0,0,136,137,5,97,0,0,137,138,5,116,
        0,0,138,18,1,0,0,0,139,140,5,98,0,0,140,141,5,111,0,0,141,142,5,
        111,0,0,142,143,5,108,0,0,143,20,1,0,0,0,144,145,5,109,0,0,145,146,
        5,97,0,0,146,147,5,105,0,0,147,148,5,110,0,0,148,22,1,0,0,0,149,
        150,5,43,0,0,150,24,1,0,0,0,151,152,5,45,0,0,152,26,1,0,0,0,153,
        154,5,42,0,0,154,28,1,0,0,0,155,156,5,47,0,0,156,30,1,0,0,0,157,
        158,5,37,0,0,158,32,1,0,0,0,159,160,5,43,0,0,160,161,5,43,0,0,161,
        34,1,0,0,0,162,163,5,45,0,0,163,164,5,45,0,0,164,36,1,0,0,0,165,
        166,5,61,0,0,166,38,1,0,0,0,167,174,3,41,20,0,168,174,3,43,21,0,
        169,174,3,45,22,0,170,174,3,47,23,0,171,174,3,49,24,0,172,174,3,
        51,25,0,173,167,1,0,0,0,173,168,1,0,0,0,173,169,1,0,0,0,173,170,
        1,0,0,0,173,171,1,0,0,0,173,172,1,0,0,0,174,40,1,0,0,0,175,176,5,
        60,0,0,176,42,1,0,0,0,177,178,5,62,0,0,178,44,1,0,0,0,179,180,5,
        60,0,0,180,181,5,61,0,0,181,46,1,0,0,0,182,183,5,62,0,0,183,184,
        5,61,0,0,184,48,1,0,0,0,185,186,5,61,0,0,186,187,5,61,0,0,187,50,
        1,0,0,0,188,189,5,33,0,0,189,190,5,61,0,0,190,52,1,0,0,0,191,192,
        5,97,0,0,192,193,5,110,0,0,193,197,5,100,0,0,194,195,5,38,0,0,195,
        197,5,38,0,0,196,191,1,0,0,0,196,194,1,0,0,0,197,54,1,0,0,0,198,
        199,5,111,0,0,199,203,5,114,0,0,200,201,5,124,0,0,201,203,5,124,
        0,0,202,198,1,0,0,0,202,200,1,0,0,0,203,56,1,0,0,0,204,205,5,110,
        0,0,205,206,5,111,0,0,206,209,5,116,0,0,207,209,5,33,0,0,208,204,
        1,0,0,0,208,207,1,0,0,0,209,58,1,0,0,0,210,211,5,40,0,0,211,60,1,
        0,0,0,212,213,5,41,0,0,213,62,1,0,0,0,214,215,5,123,0,0,215,64,1,
        0,0,0,216,217,5,125,0,0,217,66,1,0,0,0,218,219,5,59,0,0,219,68,1,
        0,0,0,220,221,5,44,0,0,221,70,1,0,0,0,222,223,5,46,0,0,223,72,1,
        0,0,0,224,226,7,0,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,
        0,0,0,227,228,1,0,0,0,228,74,1,0,0,0,229,231,7,0,0,0,230,229,1,0,
        0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,234,1,0,
        0,0,234,238,5,46,0,0,235,237,7,0,0,0,236,235,1,0,0,0,237,240,1,0,
        0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,248,1,0,0,0,240,238,1,0,
        0,0,241,243,5,46,0,0,242,244,7,0,0,0,243,242,1,0,0,0,244,245,1,0,
        0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,230,1,0,
        0,0,247,241,1,0,0,0,248,76,1,0,0,0,249,250,5,84,0,0,250,251,5,114,
        0,0,251,252,5,117,0,0,252,259,5,101,0,0,253,254,5,70,0,0,254,255,
        5,97,0,0,255,256,5,108,0,0,256,257,5,115,0,0,257,259,5,101,0,0,258,
        249,1,0,0,0,258,253,1,0,0,0,259,78,1,0,0,0,260,264,7,1,0,0,261,263,
        7,2,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,
        1,0,0,0,265,80,1,0,0,0,266,264,1,0,0,0,267,272,5,34,0,0,268,271,
        3,83,41,0,269,271,8,3,0,0,270,268,1,0,0,0,270,269,1,0,0,0,271,274,
        1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,272,
        1,0,0,0,275,276,5,34,0,0,276,82,1,0,0,0,277,278,5,92,0,0,278,279,
        7,4,0,0,279,84,1,0,0,0,280,282,7,5,0,0,281,280,1,0,0,0,282,283,1,
        0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,286,6,
        42,0,0,286,86,1,0,0,0,287,288,5,47,0,0,288,291,5,47,0,0,289,291,
        5,35,0,0,290,287,1,0,0,0,290,289,1,0,0,0,291,295,1,0,0,0,292,294,
        8,6,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,
        1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,6,43,0,0,299,88,
        1,0,0,0,300,301,5,47,0,0,301,302,5,42,0,0,302,306,1,0,0,0,303,305,
        9,0,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,307,1,0,0,0,306,304,
        1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,310,5,42,0,0,310,311,
        5,47,0,0,311,312,1,0,0,0,312,313,6,44,0,0,313,90,1,0,0,0,18,0,173,
        196,202,208,227,232,238,245,247,258,264,270,272,283,290,295,306,
        1,6,0,0
    ]

class tngLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    WHILE = 4
    RETURN = 5
    PRINT = 6
    TIPO_INT = 7
    TIPO_STRING = 8
    TIPO_FLOAT = 9
    TIPO_BOOL = 10
    MAIN = 11
    MAIS = 12
    MENOS = 13
    MULT = 14
    DIV = 15
    MOD = 16
    INC = 17
    DEC = 18
    ATRIB = 19
    OP_LOGICO = 20
    MENOR = 21
    MAIOR = 22
    MENOR_IG = 23
    MAIOR_IG = 24
    IGUAL = 25
    N_IGUAL = 26
    AND = 27
    OR = 28
    NOT = 29
    PAR_E = 30
    PAR_D = 31
    CHAVE_E = 32
    CHAVE_D = 33
    PV = 34
    VIRG = 35
    PONTO = 36
    INTEGER = 37
    FLOAT = 38
    BOOL = 39
    IDENTIFIER = 40
    STRING = 41
    WS = 42
    COMMENT = 43
    BlockComment = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'while'", "'return'", "'print'", 
            "'int'", "'string'", "'float'", "'bool'", "'main'", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'++'", "'--'", "'='", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'!='", "'('", "')'", "'{'", "'}'", "';'", "','", 
            "'.'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "WHILE", "RETURN", "PRINT", "TIPO_INT", 
            "TIPO_STRING", "TIPO_FLOAT", "TIPO_BOOL", "MAIN", "MAIS", "MENOS", 
            "MULT", "DIV", "MOD", "INC", "DEC", "ATRIB", "OP_LOGICO", "MENOR", 
            "MAIOR", "MENOR_IG", "MAIOR_IG", "IGUAL", "N_IGUAL", "AND", 
            "OR", "NOT", "PAR_E", "PAR_D", "CHAVE_E", "CHAVE_D", "PV", "VIRG", 
            "PONTO", "INTEGER", "FLOAT", "BOOL", "IDENTIFIER", "STRING", 
            "WS", "COMMENT", "BlockComment" ]

    ruleNames = [ "IF", "ELSE", "FOR", "WHILE", "RETURN", "PRINT", "TIPO_INT", 
                  "TIPO_STRING", "TIPO_FLOAT", "TIPO_BOOL", "MAIN", "MAIS", 
                  "MENOS", "MULT", "DIV", "MOD", "INC", "DEC", "ATRIB", 
                  "OP_LOGICO", "MENOR", "MAIOR", "MENOR_IG", "MAIOR_IG", 
                  "IGUAL", "N_IGUAL", "AND", "OR", "NOT", "PAR_E", "PAR_D", 
                  "CHAVE_E", "CHAVE_D", "PV", "VIRG", "PONTO", "INTEGER", 
                  "FLOAT", "BOOL", "IDENTIFIER", "STRING", "CHAR_ESP", "WS", 
                  "COMMENT", "BlockComment" ]

    grammarFileName = "tng.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


