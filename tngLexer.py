# Generated from tng.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,283,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,19,3,19,170,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,
        23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,
        26,193,8,26,1,27,1,27,1,27,1,27,3,27,199,8,27,1,28,1,28,1,28,1,28,
        3,28,205,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
        1,34,1,34,1,35,1,35,1,36,4,36,222,8,36,11,36,12,36,223,1,37,4,37,
        227,8,37,11,37,12,37,228,1,37,1,37,5,37,233,8,37,10,37,12,37,236,
        9,37,1,37,1,37,4,37,240,8,37,11,37,12,37,241,3,37,244,8,37,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,255,8,38,1,39,1,39,
        5,39,259,8,39,10,39,12,39,262,9,39,1,40,1,40,1,40,5,40,267,8,40,
        10,40,12,40,270,9,40,1,40,1,40,1,41,1,41,1,41,1,42,4,42,278,8,42,
        11,42,12,42,279,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,0,85,42,1,0,6,1,0,48,57,2,0,65,90,97,122,3,0,48,57,65,90,97,
        122,2,0,34,34,92,92,6,0,34,34,39,39,92,92,110,110,114,114,116,116,
        3,0,9,10,13,13,32,32,299,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,90,
        1,0,0,0,5,95,1,0,0,0,7,99,1,0,0,0,9,105,1,0,0,0,11,112,1,0,0,0,13,
        118,1,0,0,0,15,122,1,0,0,0,17,129,1,0,0,0,19,135,1,0,0,0,21,140,
        1,0,0,0,23,145,1,0,0,0,25,147,1,0,0,0,27,149,1,0,0,0,29,151,1,0,
        0,0,31,153,1,0,0,0,33,155,1,0,0,0,35,158,1,0,0,0,37,161,1,0,0,0,
        39,169,1,0,0,0,41,171,1,0,0,0,43,173,1,0,0,0,45,175,1,0,0,0,47,178,
        1,0,0,0,49,181,1,0,0,0,51,184,1,0,0,0,53,192,1,0,0,0,55,198,1,0,
        0,0,57,204,1,0,0,0,59,206,1,0,0,0,61,208,1,0,0,0,63,210,1,0,0,0,
        65,212,1,0,0,0,67,214,1,0,0,0,69,216,1,0,0,0,71,218,1,0,0,0,73,221,
        1,0,0,0,75,243,1,0,0,0,77,254,1,0,0,0,79,256,1,0,0,0,81,263,1,0,
        0,0,83,273,1,0,0,0,85,277,1,0,0,0,87,88,5,105,0,0,88,89,5,102,0,
        0,89,2,1,0,0,0,90,91,5,101,0,0,91,92,5,108,0,0,92,93,5,115,0,0,93,
        94,5,101,0,0,94,4,1,0,0,0,95,96,5,102,0,0,96,97,5,111,0,0,97,98,
        5,114,0,0,98,6,1,0,0,0,99,100,5,119,0,0,100,101,5,104,0,0,101,102,
        5,105,0,0,102,103,5,108,0,0,103,104,5,101,0,0,104,8,1,0,0,0,105,
        106,5,114,0,0,106,107,5,101,0,0,107,108,5,116,0,0,108,109,5,117,
        0,0,109,110,5,114,0,0,110,111,5,110,0,0,111,10,1,0,0,0,112,113,5,
        112,0,0,113,114,5,114,0,0,114,115,5,105,0,0,115,116,5,110,0,0,116,
        117,5,116,0,0,117,12,1,0,0,0,118,119,5,105,0,0,119,120,5,110,0,0,
        120,121,5,116,0,0,121,14,1,0,0,0,122,123,5,115,0,0,123,124,5,116,
        0,0,124,125,5,114,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,128,
        5,103,0,0,128,16,1,0,0,0,129,130,5,102,0,0,130,131,5,108,0,0,131,
        132,5,111,0,0,132,133,5,97,0,0,133,134,5,116,0,0,134,18,1,0,0,0,
        135,136,5,98,0,0,136,137,5,111,0,0,137,138,5,111,0,0,138,139,5,108,
        0,0,139,20,1,0,0,0,140,141,5,109,0,0,141,142,5,97,0,0,142,143,5,
        105,0,0,143,144,5,110,0,0,144,22,1,0,0,0,145,146,5,43,0,0,146,24,
        1,0,0,0,147,148,5,45,0,0,148,26,1,0,0,0,149,150,5,42,0,0,150,28,
        1,0,0,0,151,152,5,47,0,0,152,30,1,0,0,0,153,154,5,37,0,0,154,32,
        1,0,0,0,155,156,5,43,0,0,156,157,5,43,0,0,157,34,1,0,0,0,158,159,
        5,45,0,0,159,160,5,45,0,0,160,36,1,0,0,0,161,162,5,61,0,0,162,38,
        1,0,0,0,163,170,3,41,20,0,164,170,3,43,21,0,165,170,3,45,22,0,166,
        170,3,47,23,0,167,170,3,49,24,0,168,170,3,51,25,0,169,163,1,0,0,
        0,169,164,1,0,0,0,169,165,1,0,0,0,169,166,1,0,0,0,169,167,1,0,0,
        0,169,168,1,0,0,0,170,40,1,0,0,0,171,172,5,60,0,0,172,42,1,0,0,0,
        173,174,5,62,0,0,174,44,1,0,0,0,175,176,5,60,0,0,176,177,5,61,0,
        0,177,46,1,0,0,0,178,179,5,62,0,0,179,180,5,61,0,0,180,48,1,0,0,
        0,181,182,5,61,0,0,182,183,5,61,0,0,183,50,1,0,0,0,184,185,5,33,
        0,0,185,186,5,61,0,0,186,52,1,0,0,0,187,188,5,97,0,0,188,189,5,110,
        0,0,189,193,5,100,0,0,190,191,5,38,0,0,191,193,5,38,0,0,192,187,
        1,0,0,0,192,190,1,0,0,0,193,54,1,0,0,0,194,195,5,111,0,0,195,199,
        5,114,0,0,196,197,5,124,0,0,197,199,5,124,0,0,198,194,1,0,0,0,198,
        196,1,0,0,0,199,56,1,0,0,0,200,201,5,110,0,0,201,202,5,111,0,0,202,
        205,5,116,0,0,203,205,5,33,0,0,204,200,1,0,0,0,204,203,1,0,0,0,205,
        58,1,0,0,0,206,207,5,40,0,0,207,60,1,0,0,0,208,209,5,41,0,0,209,
        62,1,0,0,0,210,211,5,123,0,0,211,64,1,0,0,0,212,213,5,125,0,0,213,
        66,1,0,0,0,214,215,5,59,0,0,215,68,1,0,0,0,216,217,5,44,0,0,217,
        70,1,0,0,0,218,219,5,46,0,0,219,72,1,0,0,0,220,222,7,0,0,0,221,220,
        1,0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,74,1,
        0,0,0,225,227,7,0,0,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,1,
        0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,234,5,46,0,0,231,233,7,
        0,0,0,232,231,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,
        0,0,0,235,244,1,0,0,0,236,234,1,0,0,0,237,239,5,46,0,0,238,240,7,
        0,0,0,239,238,1,0,0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,
        0,0,0,242,244,1,0,0,0,243,226,1,0,0,0,243,237,1,0,0,0,244,76,1,0,
        0,0,245,246,5,84,0,0,246,247,5,114,0,0,247,248,5,117,0,0,248,255,
        5,101,0,0,249,250,5,70,0,0,250,251,5,97,0,0,251,252,5,108,0,0,252,
        253,5,115,0,0,253,255,5,101,0,0,254,245,1,0,0,0,254,249,1,0,0,0,
        255,78,1,0,0,0,256,260,7,1,0,0,257,259,7,2,0,0,258,257,1,0,0,0,259,
        262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,80,1,0,0,0,262,260,
        1,0,0,0,263,268,5,34,0,0,264,267,3,83,41,0,265,267,8,3,0,0,266,264,
        1,0,0,0,266,265,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,
        1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,272,5,34,0,0,272,82,
        1,0,0,0,273,274,5,92,0,0,274,275,7,4,0,0,275,84,1,0,0,0,276,278,
        7,5,0,0,277,276,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,
        1,0,0,0,280,281,1,0,0,0,281,282,6,42,0,0,282,86,1,0,0,0,15,0,169,
        192,198,204,223,228,234,241,243,254,260,266,268,279,1,6,0,0
    ]

class tngLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    WHILE = 4
    RETURN = 5
    PRINT = 6
    TIPO_INT = 7
    TIPO_STRING = 8
    TIPO_FLOAT = 9
    TIPO_BOOL = 10
    MAIN = 11
    MAIS = 12
    MENOS = 13
    MULT = 14
    DIV = 15
    MOD = 16
    INC = 17
    DEC = 18
    ATRIB = 19
    OP_LOGICO = 20
    MENOR = 21
    MAIOR = 22
    MENOR_IG = 23
    MAIOR_IG = 24
    IGUAL = 25
    N_IGUAL = 26
    AND = 27
    OR = 28
    NOT = 29
    PAR_E = 30
    PAR_D = 31
    CHAVE_E = 32
    CHAVE_D = 33
    PV = 34
    VIRG = 35
    PONTO = 36
    INTEGER = 37
    FLOAT = 38
    BOOL = 39
    IDENTIFIER = 40
    STRING = 41
    WS = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'while'", "'return'", "'print'", 
            "'int'", "'string'", "'float'", "'bool'", "'main'", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'++'", "'--'", "'='", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'!='", "'('", "')'", "'{'", "'}'", "';'", "','", 
            "'.'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "WHILE", "RETURN", "PRINT", "TIPO_INT", 
            "TIPO_STRING", "TIPO_FLOAT", "TIPO_BOOL", "MAIN", "MAIS", "MENOS", 
            "MULT", "DIV", "MOD", "INC", "DEC", "ATRIB", "OP_LOGICO", "MENOR", 
            "MAIOR", "MENOR_IG", "MAIOR_IG", "IGUAL", "N_IGUAL", "AND", 
            "OR", "NOT", "PAR_E", "PAR_D", "CHAVE_E", "CHAVE_D", "PV", "VIRG", 
            "PONTO", "INTEGER", "FLOAT", "BOOL", "IDENTIFIER", "STRING", 
            "WS" ]

    ruleNames = [ "IF", "ELSE", "FOR", "WHILE", "RETURN", "PRINT", "TIPO_INT", 
                  "TIPO_STRING", "TIPO_FLOAT", "TIPO_BOOL", "MAIN", "MAIS", 
                  "MENOS", "MULT", "DIV", "MOD", "INC", "DEC", "ATRIB", 
                  "OP_LOGICO", "MENOR", "MAIOR", "MENOR_IG", "MAIOR_IG", 
                  "IGUAL", "N_IGUAL", "AND", "OR", "NOT", "PAR_E", "PAR_D", 
                  "CHAVE_E", "CHAVE_D", "PV", "VIRG", "PONTO", "INTEGER", 
                  "FLOAT", "BOOL", "IDENTIFIER", "STRING", "CHAR_ESP", "WS" ]

    grammarFileName = "tng.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


