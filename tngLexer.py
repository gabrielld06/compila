# Generated from tng.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,322,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        3,20,182,8,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
        1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,205,
        8,27,1,28,1,28,1,28,1,28,3,28,211,8,28,1,29,1,29,1,29,1,29,3,29,
        217,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,37,4,37,234,8,37,11,37,12,37,235,1,38,4,38,239,
        8,38,11,38,12,38,240,1,38,1,38,5,38,245,8,38,10,38,12,38,248,9,38,
        1,38,1,38,4,38,252,8,38,11,38,12,38,253,3,38,256,8,38,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,267,8,39,1,40,1,40,5,40,
        271,8,40,10,40,12,40,274,9,40,1,41,1,41,1,41,5,41,279,8,41,10,41,
        12,41,282,9,41,1,41,1,41,1,42,1,42,1,42,1,43,4,43,290,8,43,11,43,
        12,43,291,1,43,1,43,1,44,1,44,1,44,3,44,299,8,44,1,44,5,44,302,8,
        44,10,44,12,44,305,9,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,313,8,
        45,10,45,12,45,316,9,45,1,45,1,45,1,45,1,45,1,45,1,314,0,46,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,0,87,43,89,44,91,45,1,0,7,
        1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,
        92,92,6,0,34,34,39,39,92,92,110,110,114,114,116,116,3,0,9,10,13,
        13,32,32,2,0,10,10,13,13,341,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,87,1,0,0,0,0,
        89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,96,1,0,0,0,5,101,1,0,0,0,
        7,105,1,0,0,0,9,111,1,0,0,0,11,118,1,0,0,0,13,124,1,0,0,0,15,130,
        1,0,0,0,17,134,1,0,0,0,19,141,1,0,0,0,21,147,1,0,0,0,23,152,1,0,
        0,0,25,157,1,0,0,0,27,159,1,0,0,0,29,161,1,0,0,0,31,163,1,0,0,0,
        33,165,1,0,0,0,35,167,1,0,0,0,37,170,1,0,0,0,39,173,1,0,0,0,41,181,
        1,0,0,0,43,183,1,0,0,0,45,185,1,0,0,0,47,187,1,0,0,0,49,190,1,0,
        0,0,51,193,1,0,0,0,53,196,1,0,0,0,55,204,1,0,0,0,57,210,1,0,0,0,
        59,216,1,0,0,0,61,218,1,0,0,0,63,220,1,0,0,0,65,222,1,0,0,0,67,224,
        1,0,0,0,69,226,1,0,0,0,71,228,1,0,0,0,73,230,1,0,0,0,75,233,1,0,
        0,0,77,255,1,0,0,0,79,266,1,0,0,0,81,268,1,0,0,0,83,275,1,0,0,0,
        85,285,1,0,0,0,87,289,1,0,0,0,89,298,1,0,0,0,91,308,1,0,0,0,93,94,
        5,105,0,0,94,95,5,102,0,0,95,2,1,0,0,0,96,97,5,101,0,0,97,98,5,108,
        0,0,98,99,5,115,0,0,99,100,5,101,0,0,100,4,1,0,0,0,101,102,5,102,
        0,0,102,103,5,111,0,0,103,104,5,114,0,0,104,6,1,0,0,0,105,106,5,
        119,0,0,106,107,5,104,0,0,107,108,5,105,0,0,108,109,5,108,0,0,109,
        110,5,101,0,0,110,8,1,0,0,0,111,112,5,114,0,0,112,113,5,101,0,0,
        113,114,5,116,0,0,114,115,5,117,0,0,115,116,5,114,0,0,116,117,5,
        110,0,0,117,10,1,0,0,0,118,119,5,112,0,0,119,120,5,114,0,0,120,121,
        5,105,0,0,121,122,5,110,0,0,122,123,5,116,0,0,123,12,1,0,0,0,124,
        125,5,105,0,0,125,126,5,110,0,0,126,127,5,112,0,0,127,128,5,117,
        0,0,128,129,5,116,0,0,129,14,1,0,0,0,130,131,5,105,0,0,131,132,5,
        110,0,0,132,133,5,116,0,0,133,16,1,0,0,0,134,135,5,115,0,0,135,136,
        5,116,0,0,136,137,5,114,0,0,137,138,5,105,0,0,138,139,5,110,0,0,
        139,140,5,103,0,0,140,18,1,0,0,0,141,142,5,102,0,0,142,143,5,108,
        0,0,143,144,5,111,0,0,144,145,5,97,0,0,145,146,5,116,0,0,146,20,
        1,0,0,0,147,148,5,98,0,0,148,149,5,111,0,0,149,150,5,111,0,0,150,
        151,5,108,0,0,151,22,1,0,0,0,152,153,5,109,0,0,153,154,5,97,0,0,
        154,155,5,105,0,0,155,156,5,110,0,0,156,24,1,0,0,0,157,158,5,43,
        0,0,158,26,1,0,0,0,159,160,5,45,0,0,160,28,1,0,0,0,161,162,5,42,
        0,0,162,30,1,0,0,0,163,164,5,47,0,0,164,32,1,0,0,0,165,166,5,37,
        0,0,166,34,1,0,0,0,167,168,5,43,0,0,168,169,5,43,0,0,169,36,1,0,
        0,0,170,171,5,45,0,0,171,172,5,45,0,0,172,38,1,0,0,0,173,174,5,61,
        0,0,174,40,1,0,0,0,175,182,3,43,21,0,176,182,3,45,22,0,177,182,3,
        47,23,0,178,182,3,49,24,0,179,182,3,51,25,0,180,182,3,53,26,0,181,
        175,1,0,0,0,181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,
        179,1,0,0,0,181,180,1,0,0,0,182,42,1,0,0,0,183,184,5,60,0,0,184,
        44,1,0,0,0,185,186,5,62,0,0,186,46,1,0,0,0,187,188,5,60,0,0,188,
        189,5,61,0,0,189,48,1,0,0,0,190,191,5,62,0,0,191,192,5,61,0,0,192,
        50,1,0,0,0,193,194,5,61,0,0,194,195,5,61,0,0,195,52,1,0,0,0,196,
        197,5,33,0,0,197,198,5,61,0,0,198,54,1,0,0,0,199,200,5,97,0,0,200,
        201,5,110,0,0,201,205,5,100,0,0,202,203,5,38,0,0,203,205,5,38,0,
        0,204,199,1,0,0,0,204,202,1,0,0,0,205,56,1,0,0,0,206,207,5,111,0,
        0,207,211,5,114,0,0,208,209,5,124,0,0,209,211,5,124,0,0,210,206,
        1,0,0,0,210,208,1,0,0,0,211,58,1,0,0,0,212,213,5,110,0,0,213,214,
        5,111,0,0,214,217,5,116,0,0,215,217,5,33,0,0,216,212,1,0,0,0,216,
        215,1,0,0,0,217,60,1,0,0,0,218,219,5,40,0,0,219,62,1,0,0,0,220,221,
        5,41,0,0,221,64,1,0,0,0,222,223,5,123,0,0,223,66,1,0,0,0,224,225,
        5,125,0,0,225,68,1,0,0,0,226,227,5,59,0,0,227,70,1,0,0,0,228,229,
        5,44,0,0,229,72,1,0,0,0,230,231,5,46,0,0,231,74,1,0,0,0,232,234,
        7,0,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,
        1,0,0,0,236,76,1,0,0,0,237,239,7,0,0,0,238,237,1,0,0,0,239,240,1,
        0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,246,5,
        46,0,0,243,245,7,0,0,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,
        0,0,0,246,247,1,0,0,0,247,256,1,0,0,0,248,246,1,0,0,0,249,251,5,
        46,0,0,250,252,7,0,0,0,251,250,1,0,0,0,252,253,1,0,0,0,253,251,1,
        0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,238,1,0,0,0,255,249,1,
        0,0,0,256,78,1,0,0,0,257,258,5,84,0,0,258,259,5,114,0,0,259,260,
        5,117,0,0,260,267,5,101,0,0,261,262,5,70,0,0,262,263,5,97,0,0,263,
        264,5,108,0,0,264,265,5,115,0,0,265,267,5,101,0,0,266,257,1,0,0,
        0,266,261,1,0,0,0,267,80,1,0,0,0,268,272,7,1,0,0,269,271,7,2,0,0,
        270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,
        273,82,1,0,0,0,274,272,1,0,0,0,275,280,5,34,0,0,276,279,3,85,42,
        0,277,279,8,3,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,282,1,0,0,
        0,280,278,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,
        0,283,284,5,34,0,0,284,84,1,0,0,0,285,286,5,92,0,0,286,287,7,4,0,
        0,287,86,1,0,0,0,288,290,7,5,0,0,289,288,1,0,0,0,290,291,1,0,0,0,
        291,289,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,6,43,0,0,
        294,88,1,0,0,0,295,296,5,47,0,0,296,299,5,47,0,0,297,299,5,35,0,
        0,298,295,1,0,0,0,298,297,1,0,0,0,299,303,1,0,0,0,300,302,8,6,0,
        0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,
        0,304,306,1,0,0,0,305,303,1,0,0,0,306,307,6,44,0,0,307,90,1,0,0,
        0,308,309,5,47,0,0,309,310,5,42,0,0,310,314,1,0,0,0,311,313,9,0,
        0,0,312,311,1,0,0,0,313,316,1,0,0,0,314,315,1,0,0,0,314,312,1,0,
        0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,318,5,42,0,0,318,319,5,47,
        0,0,319,320,1,0,0,0,320,321,6,45,0,0,321,92,1,0,0,0,18,0,181,204,
        210,216,235,240,246,253,255,266,272,278,280,291,298,303,314,1,6,
        0,0
    ]

class tngLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    WHILE = 4
    RETURN = 5
    PRINT = 6
    INPUT = 7
    TIPO_INT = 8
    TIPO_STRING = 9
    TIPO_FLOAT = 10
    TIPO_BOOL = 11
    MAIN = 12
    MAIS = 13
    MENOS = 14
    MULT = 15
    DIV = 16
    MOD = 17
    INC = 18
    DEC = 19
    ATRIB = 20
    OP_LOGICO = 21
    MENOR = 22
    MAIOR = 23
    MENOR_IG = 24
    MAIOR_IG = 25
    IGUAL = 26
    N_IGUAL = 27
    AND = 28
    OR = 29
    NOT = 30
    PAR_E = 31
    PAR_D = 32
    CHAVE_E = 33
    CHAVE_D = 34
    PV = 35
    VIRG = 36
    PONTO = 37
    INTEGER = 38
    FLOAT = 39
    BOOL = 40
    IDENTIFIER = 41
    STRING = 42
    WS = 43
    LINECOMMENT = 44
    BLOCKCOMMENT = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'while'", "'return'", "'print'", 
            "'input'", "'int'", "'string'", "'float'", "'bool'", "'main'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'='", "'<'", 
            "'>'", "'<='", "'>='", "'=='", "'!='", "'('", "')'", "'{'", 
            "'}'", "';'", "','", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "WHILE", "RETURN", "PRINT", "INPUT", "TIPO_INT", 
            "TIPO_STRING", "TIPO_FLOAT", "TIPO_BOOL", "MAIN", "MAIS", "MENOS", 
            "MULT", "DIV", "MOD", "INC", "DEC", "ATRIB", "OP_LOGICO", "MENOR", 
            "MAIOR", "MENOR_IG", "MAIOR_IG", "IGUAL", "N_IGUAL", "AND", 
            "OR", "NOT", "PAR_E", "PAR_D", "CHAVE_E", "CHAVE_D", "PV", "VIRG", 
            "PONTO", "INTEGER", "FLOAT", "BOOL", "IDENTIFIER", "STRING", 
            "WS", "LINECOMMENT", "BLOCKCOMMENT" ]

    ruleNames = [ "IF", "ELSE", "FOR", "WHILE", "RETURN", "PRINT", "INPUT", 
                  "TIPO_INT", "TIPO_STRING", "TIPO_FLOAT", "TIPO_BOOL", 
                  "MAIN", "MAIS", "MENOS", "MULT", "DIV", "MOD", "INC", 
                  "DEC", "ATRIB", "OP_LOGICO", "MENOR", "MAIOR", "MENOR_IG", 
                  "MAIOR_IG", "IGUAL", "N_IGUAL", "AND", "OR", "NOT", "PAR_E", 
                  "PAR_D", "CHAVE_E", "CHAVE_D", "PV", "VIRG", "PONTO", 
                  "INTEGER", "FLOAT", "BOOL", "IDENTIFIER", "STRING", "CHAR_ESP", 
                  "WS", "LINECOMMENT", "BLOCKCOMMENT" ]

    grammarFileName = "tng.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


